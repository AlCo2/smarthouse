generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model notes {
  body   String? @db.Char(200)
  id     Int     @id @default(autoincrement())
  name   String? @db.Char(100)
  userId String
  user   User    @relation(fields: [userId], references: [id])

  @@index([userId], map: "notes_userId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  name          String?
  country       Int?
  firstName     String?    @db.VarChar(45)
  lastName      String?    @db.VarChar(45)
  phone         String?    @db.VarChar(45)
  accounts      Account[]
  notes         notes[]
  sessions      Session[]
  countries     countries? @relation(fields: [country], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "country")

  @@index([country], map: "country_idx")
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model countries {
  id    Int    @id @default(autoincrement())
  name  String @unique(map: "name") @db.Char(100)
  iso   String @unique(map: "iso") @db.Char(2)
  users User[]
}
